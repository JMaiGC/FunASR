import json
import math
import numpy as np
import argparse

def get_parser():
    parser = argparse.ArgumentParser(
        description="convert kaldi global cmvn file into json stats file.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "--kaldi-cmvn-file",
        default=False,
        required=True,
        type=str,
        help="kaldi global cmvn file",
    )
    parser.add_argument(
        "--json-statis-file",
        default=False,
        required=True,
        type=str,
        help="output dir",
    )
    parser.add_argument(
        "--am-mvn",
        default=False,
        required=True,
        type=str,
        help="output dir",
    )
    return parser

def load_kaldi_cmvn(kaldi_cmvn_file):
    """ Load the kaldi format cmvn stats file and calculate cmvn

    Args:
        kaldi_cmvn_file:  kaldi text style global cmvn file, which
           is generated by:
           compute-cmvn-stats --binary=false scp:feats.scp global_cmvn

    Returns:
        a numpy array of [means, vars]
    """
    means = []
    variance = []
    with open(kaldi_cmvn_file, 'r') as fid:
        # kaldi binary file start with '\0B'
        if fid.read(2) == '\0B':
            logging.error('kaldi cmvn binary file is not supported, please '
                          'recompute it by: compute-cmvn-stats --binary=false '
                          ' scp:feats.scp global_cmvn')
            sys.exit(1)
        fid.seek(0)
        arr = fid.read().split()
        assert (arr[0] == '[')
        assert (arr[-2] == '0')
        assert (arr[-1] == ']')
        feat_dim = int((len(arr) - 2 - 2) / 2)
        for i in range(1, feat_dim + 1):
            means.append(float(arr[i]))
        count = float(arr[feat_dim + 1])
        for i in range(feat_dim + 2, 2 * feat_dim + 2):
            variance.append(float(arr[i]))

    mean_stats = means
    var_stats = variance
    total_frames = count

    for i in range(len(means)):
        means[i] /= count
        variance[i] = variance[i] / count - means[i] * means[i]
        if variance[i] < 1.0e-20:
            variance[i] = 1.0e-20
        variance[i] = 1.0 / math.sqrt(variance[i])
    cmvn = np.array([means, variance])

    cmvn_info = {
        'mean_stats': mean_stats,
        'var_stats': var_stats,
        'total_frames': total_frames
    }

    return cmvn, cmvn_info

def main():
    parser = get_parser()
    args = parser.parse_args()
    kaldi_cmvn_file = args.kaldi_cmvn_file
    stats_json_file = args.json_statis_file
    am_mvn = args.am_mvn

    cmvn, cmvn_info = load_kaldi_cmvn(kaldi_cmvn_file)
    with open(stats_json_file, 'w') as fout:
        fout.write(json.dumps(cmvn_info))

    mean = cmvn[0]
    var = cmvn[1]
    dims = mean.shape[0]
    with open(args.am_mvn, 'w') as fout:
        fout.write(
            "<Nnet>" + "\n" + "<Splice> " + str(dims) + " " + str(dims) + '\n' + "[ 0 ]" + "\n" + "<AddShift> " + str(
                dims) + " " + str(dims) + "\n")
        mean_str = str(list(mean)).replace(',', '').replace('[', '[ ').replace(']', ' ]')
        fout.write("<LearnRateCoef> 0 " + mean_str + '\n')
        fout.write("<Rescale> " + str(dims) + " " + str(dims) + '\n')
        var_str = str(list(var)).replace(',', '').replace('[', '[ ').replace(']', ' ]')
        fout.write("<LearnRateCoef> 0 " + var_str + '\n')
        fout.write("</Nnet>" + '\n')




if __name__ == '__main__':
    main()
